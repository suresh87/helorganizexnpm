{"version":3,"file":"RegistryClient.js","sourceRoot":"","sources":["../src/RegistryClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { to } from 'await-to-js';\nimport * as pRequest from 'request-promise-native';\nimport * as url from 'url';\n\nimport { findVersionMetadata, MetadataOptions, PackageMetadata } from '.';\nimport { buildNpmConfig, buildNpmCredentials } from './npm';\n\nconst DEFAULT_OPTIONS: MetadataOptions = {\n  allMetadata: false,\n  allVersions: false,\n  fullMetadata: false,\n  version: 'latest'\n};\n\n/**\n * A simple client interface to the npm repository\n */\nexport class RegistryClient {\n\n  /**\n   * Retrieves metadata on the provided package name.\n   *\n   * If a `dist-tag` is specified in the options, a lookup will first be performed\n   * to find the version associated with the tag. If a semver is specified, the\n   * appropriate semver matching logic will be performed or a static version may also\n   * be specified. If no version is specified, the version will default to `latest`.\n   *\n   * When `allVersions` is `false`, the requested metadata will be available under\n   * `versions` object with a key corresponding to the user provided version or\n   * `latest` if no version was provided.\n   *\n   * Exmaple:\n   * ```\n   import RegistryClient from 'package-metadata';\n   import * as util from 'util';\n   const metadata = await RegistryClient.getMetadata('package-metadata', { version: '^1.0.0' });\n   console.log(util.inspect(metadata, { depth: 1 }));\n   // >> { name: 'package-metadata', versions: { '^1.0.0': [PackageJson] } }\n  ```\n   *\n   * @param packageName\n   * @param options\n   */\n  public static async getMetadata(packageName: string, options?: MetadataOptions) {\n    const opts = Object.assign({ }, DEFAULT_OPTIONS, options);\n    const scope = packageName.split('/')[0];\n    // Retrieve the current npm configuration\n    const npmConfig = buildNpmConfig(scope);\n    const packageNameUri = encodeURIComponent(packageName).replace(/^%40/, '@');\n    const repo = npmConfig.registry.endsWith('/') ? npmConfig.registry : `${npmConfig.registry}/`;\n    const metadataUrl = url.resolve(repo, packageNameUri);\n\n    const proxy = metadataUrl.startsWith('https:') ? npmConfig.proxy.https : npmConfig.proxy.http;\n    const metadataType = opts.fullMetadata\n      ? 'application/json'\n      : 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*';\n\n    const headers: { [key: string]: string; } = {\n      accept: metadataType\n    };\n\n    const authInfo = buildNpmCredentials(repo);\n    if (authInfo != null) {\n      headers.authorization = `${authInfo.type} ${authInfo.token}`;\n    }\n\n    // @ts-ignore: Not sure why tsc has a problem with this...\n    const [err, metadata] = await to(pRequest(metadataUrl, {\n      method: 'GET',\n      headers:  headers,\n      json: true,\n      proxy: proxy,\n      localAddress: npmConfig.proxy.localAddress,\n      strictSSL: npmConfig.ssl.strict,\n      cert: npmConfig.ssl.certificate,\n      key: npmConfig.ssl.key,\n      ca: npmConfig.ssl.ca\n    }) as PackageMetadata);\n\n    if (err != null || metadata == null) {\n      throw new Error(`Unable to find metadata for package: ${packageName}`);\n    }\n\n    if (opts.allVersions || opts.allMetadata) {\n      return metadata as PackageMetadata;\n    }\n\n    const versionMetadata = findVersionMetadata(opts.version!, metadata);\n    if (versionMetadata == null) {\n      throw new Error(`Unable to find metadata for version: ${opts.version}`);\n    }\n\n    const packageMetadata = {\n      name: metadata.name,\n      versions: {\n        [opts.version!]: versionMetadata\n      }\n    } as PackageMetadata;\n\n    return packageMetadata;\n  }\n\n}\n\nexport default RegistryClient;\n"]}