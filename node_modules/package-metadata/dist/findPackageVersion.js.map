{"version":3,"file":"findPackageVersion.js","sourceRoot":"","sources":["../src/findPackageVersion.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAGjC;;;;;;;;;;;;GAYG;AACU,QAAA,mBAAmB,GAAG,CAAC,OAAe,EAAE,QAAyB,EAAE,EAAE;IAChF,MAAM,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;IACnC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;QACzC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;KACzB;IACD,MAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACvD,MAAM,UAAU,GAAG,MAAM,CAAC,aAAa,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;IAClE,OAAO,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF,kBAAe,2BAAmB,CAAC","sourcesContent":["import * as semver from 'semver';\nimport { PackageMetadata } from './PackageMetadata';\n\n/**\n * Finds the package version corresponding to the version specified.  The\n * version maybe one of the following:\n * - `dist-tag`: The tag label associated with a specific published version\n * - semver: A version following standard semver conventions\n * - static version: An exact version\n *\n * Return `undefined` if no match is found.\n *\n * @param version The version identifier to match\n * @param metadata The available metadata for a package\n * @returns The version metadata or undefined\n */\nexport const findVersionMetadata = (version: string, metadata: PackageMetadata) => {\n  const tags = metadata['dist-tags'];\n  if (tags != null && tags[version] != null) {\n    version = tags[version];\n  }\n  const packageVersions = Object.keys(metadata.versions);\n  const semVersion = semver.maxSatisfying(packageVersions, version);\n  return metadata.versions[semVersion];\n};\n\nexport default findVersionMetadata;\n"]}